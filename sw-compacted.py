(lambda __g, __print: [[[[[[(lambda __after: [[[[[__after() for __g['five'] in [(str(sys.argv[1][24:30]).lower())]][0] for __g['four'] in [(str(sys.argv[1][18:24]).lower())]][0] for __g['three'] in [(str(sys.argv[1][12:18]).lower())]][0] for __g['two'] in [(str(sys.argv[1][6:12]).lower())]][0] for __g['one'] in [(str(sys.argv[1][0:6]).lower())]][0] if (len(sys.argv) == 2) else (lambda __after: [[[[[__after() for __g['five'] in [(str(sys.argv[5]).lower())]][0] for __g['four'] in [(str(sys.argv[4]).lower())]][0] for __g['three'] in [(str(sys.argv[3]).lower())]][0] for __g['two'] in [(str(sys.argv[2]).lower())]][0] for __g['one'] in [(str(sys.argv[1]).lower())]][0] if (len(sys.argv) == 6) else __after())(lambda: __after()))(lambda: [[[(__print('\n'), (lambda __after: (__print([(('[WP] Found Word "' + str(''.join(x))) + '"') for __g['x'] in combinations if (''.join(x) in wordlist)][0]), __after())[1] if (len(list([e for __g['e'] in combinations if (''.join(e) in wordlist)])) != 0) else (__print('[WP] No Word Found'), __after())[1])(lambda: (__print('\n'), None)[1]))[1] for __g['combinations'] in [([list(elem) for __g['elem'] in list(__import__('itertools').combinations(string, 5))])]][0] for __g['string'] in [(((((one + two) + three) + four) + five))]][0] for __g['wordlist'] in [(['about', 'after', 'again', 'below', 'could', 'every', 'first', 'found', 'great', 'house', 'large', 'learn', 'never', 'other', 'place', 'plant', 'point', 'right', 'small', 'sound', 'spell', 'still', 'study', 'their', 'there', 'these', 'thing', 'think', 'three', 'water', 'where', 'which', 'world', 'would', 'write'])]][0]) for __g['sys'] in [(__import__('sys'))]][0] for __g['five'] in [('D11222'.lower())]][0] for __g['four'] in [('UL1222'.lower())]][0] for __g['three'] in [('OU1222'.lower())]][0] for __g['two'] in [('BO1222'.lower())]][0] for __g['one'] in [('AC1222'.lower())]][0])(globals(), __import__('__builtin__', level=0).__dict__['print'])
